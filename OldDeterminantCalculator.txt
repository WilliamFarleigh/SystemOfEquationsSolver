if (matrix.length < 3) {
            if (matrix.length == 1) {
                return matrix[0][0];
            } else {
                return matrix[0][0] * matrix[1][1] - matrix[1][0] * matrix[0][1];
            }
        } else {
            double answer = 0;
            double zeroZero = matrix[0][0];
            double[][] newMatrix;
            double coFactor = 0;
            int locationOfY = 0;
            int locationOfX = 0;

            for (int i = 0; i < matrix.length; i++) {
                newMatrix = new double[matrix.length - 1][matrix.length - 1];

                for (int x = 0; x < matrix.length; x++) {
                    if (i != x) {
                        for (int y = 1; y < matrix[i].length; y++) {
                            newMatrix[locationOfY][locationOfX] = matrix[y][x];  
                            locationOfY++;
                        }
                        locationOfY = 0;
                        locationOfX++;
                    }

                }
                locationOfX = 0;
                answer += Math.pow(-1, i) * matrix[0][i] * getDeterminant(newMatrix);
            }
            return answer;
        }

           double[][] answerMatrix = new double[matrix.length][matrix[0].length];
            for (int i = 0; i < matrix.length; i++) {
                for (int j = 0; j < matrix.length; j++) {
                    answerMatrix[i][j] = matrix[i][j];
                }
            }
            
            int pointer = 0;
            int rowSwitches = 0;//&& i > pointer
            for (int i = 1; i < matrix.length; i++) {
                for (int j = 0; j < i + 1; j++) {
                    if ((answerMatrix[i][j] == 0 || answerMatrix[i - 1][j] == 0)) {
                        System.out.println(i + " " + j);
                        double[] temp = answerMatrix[i];
                        answerMatrix[i] = answerMatrix[i - 1];
                        answerMatrix[i - 1] = temp;
                        rowSwitches++;
                        pointer++;
                    } else {
                        double multiplyBy = answerMatrix[i][j];
                        double multiplyByTwo = answerMatrix[j][j];
                        for (int y = 0; y < matrix[0].length; y++) {
                            answerMatrix[i][y] = answerMatrix[i][y] - answerMatrix[j][y] * multiplyBy / multiplyByTwo;
                        }
                        System.out.println(new Matrix(answerMatrix) + "\n");
                        pointer++;
                    }
                }
            }
            int answer = 1;

            for (int i = 0; i < matrix.length; i++) {
               // if (!(answerMatrix[i][i] == Double.POSITIVE_INFINITY - Double.POSITIVE_INFINITY || answerMatrix[i][i] == Double.POSITIVE_INFINITY || answerMatrix[i][i] == Double.NEGATIVE_INFINITY)) {
                    answer *= answerMatrix[i][i];
               // }
            }
            return answer * Math.pow(-1, rowSwitches);












            double answer = 0;
            double zeroZero = matrix[0][0];
            double[][] newMatrix;
            double coFactor = 0;
            int locationOfY = 0;
            int locationOfX = 0;

            for (int i = 0; i < matrix.length; i++) {
                newMatrix = new double[matrix.length - 1][matrix.length - 1];

                for (int x = 0; x < matrix.length; x++) {
                    if (i != x) {
                        for (int y = 1; y < matrix[i].length; y++) {
                            newMatrix[locationOfY][locationOfX] = matrix[y][x];  
                            locationOfY++;
                        }
                        locationOfY = 0;
                        locationOfX++;
                    }

                }
                locationOfX = 0;
                answer += Math.pow(-1, i) * matrix[0][i] * getDeterminant(newMatrix).doubleValue();
            }
            return BigDecimal.valueOf(answer);
        }


















        double[][] matrix = doubleMatrix;
        if (matrix.length != matrix[0].length) {
            throw new RuntimeException("There is no determinant in this matrix!");
        } else {
            double[][] inverseMatrix = new double[matrix.length][matrix.length];
            double[][] answerMatrix = new double[matrix.length][matrix.length];
            for (int i = 0; i < matrix.length; i++) {
                for (int j = 0; j < matrix.length; j++) {
                    inverseMatrix[i][j] = i == j? 1 : 0;
                }
            }
            for (int i = 0; i < matrix.length; i++) {
                for (int j = 0; j < matrix.length; j++) {
                    answerMatrix[i][j] = matrix[i][j];
                }
            }
            for(int i = 0; i < matrix.length; i++) {
                double[] zeros = new double[answerMatrix.length];
                double[] locs = new double[answerMatrix.length];
                for (int z = 0; z < answerMatrix.length; z++) {
                    int amountOfZeros = 0;
                    for (int y = 0; y < answerMatrix.length; y++) {
                        if (answerMatrix[z][y] == 0.0) {
                            amountOfZeros++;
                        } else {
                            break;
                        }
                    }
                    zeros[z] = amountOfZeros;
                }

                for (int x = 0; x < zeros.length; x++) {
                    for (int y = 0; y < zeros.length; y++) {
                        if (zeros[y] > zeros[x]) {
                            double temp = zeros[x];
                            zeros[x] = zeros[y];
                            zeros[y] = temp;
                            double[] temp2 = answerMatrix[y];
                            answerMatrix[y] = answerMatrix[x];
                            answerMatrix[x] = temp2;
                            double[] temp3 = inverseMatrix[y];
                            inverseMatrix[y] = inverseMatrix[x];
                            inverseMatrix[x] = temp3;
                        }
                    }
                }
                for (int j = 0; j < matrix.length - 1 - i; j++) {
                    double thing = answerMatrix[matrix.length - 1 - j][i];
                    double multiplyBy = answerMatrix[i][i];
                    if (thing != 0 && multiplyBy != 0) {
                        for (int y = 0; y < matrix[0].length; y++) {
                            answerMatrix[matrix.length - 1 - j][y] = (answerMatrix[matrix.length - 1 - j][y] * multiplyBy - answerMatrix[i][y] * thing) / multiplyBy;
                            inverseMatrix[matrix.length - 1 - j][y] = (inverseMatrix[matrix.length - 1 - j][y] * multiplyBy - inverseMatrix[i][y] * thing) / multiplyBy;
                        }
                    }
                }
            }
            // second one
            for (int i = answerMatrix.length - 1; i >= 0; i--) {
                for (int j = answerMatrix.length - 1; j >= i; j--) {
                    double thing = answerMatrix[j][i];
                    double multiplyBy = answerMatrix[i][i];
                    if (thing != 0 && multiplyBy != 0) {
                        for (int y = matrix[0].length - 1; y >= 0; y--) {
                            if (j != y) {
                                answerMatrix[j][y] = (answerMatrix[j][y] * multiplyBy - answerMatrix[i][y] * thing) / multiplyBy;
                                inverseMatrix[j][y] = (inverseMatrix[j][y] * multiplyBy - inverseMatrix[i][y] * thing) / multiplyBy;
                            }
                        }
                    }
                }
            }
            System.out.println(new Matrix(inverseMatrix));